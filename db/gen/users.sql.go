// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :execresult
INSERT INTO users (
  kakao_id, name, phone_no
) VALUES (
  ?, ?, ?
)
`

type CreateUserParams struct {
	KakaoID sql.NullInt64
	Name    sql.NullString
	PhoneNo sql.NullString
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createUser, arg.KakaoID, arg.Name, arg.PhoneNo)
}

const deleteUser = `-- name: DeleteUser :exec
DELETE FROM users
WHERE id = ?
`

func (q *Queries) DeleteUser(ctx context.Context, id uint64) error {
	_, err := q.db.ExecContext(ctx, deleteUser, id)
	return err
}

const getUserById = `-- name: GetUserById :one
SELECT id, created_at, updated_at, deleted_at, kakao_id, name, phone_no FROM users WHERE id = ? LIMIT 1
`

func (q *Queries) GetUserById(ctx context.Context, id uint64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserById, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.KakaoID,
		&i.Name,
		&i.PhoneNo,
	)
	return i, err
}

const getUserByKakaoId = `-- name: GetUserByKakaoId :one
SELECT id, created_at, updated_at, deleted_at, kakao_id, name, phone_no FROM users WHERE kakao_id = ? LIMIT 1
`

func (q *Queries) GetUserByKakaoId(ctx context.Context, kakaoID sql.NullInt64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByKakaoId, kakaoID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.KakaoID,
		&i.Name,
		&i.PhoneNo,
	)
	return i, err
}

const listUsers = `-- name: ListUsers :many
SELECT id, created_at, updated_at, deleted_at, kakao_id, name, phone_no FROM users ORDER BY name
`

func (q *Queries) ListUsers(ctx context.Context) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []User
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.KakaoID,
			&i.Name,
			&i.PhoneNo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = ?, phone_no = ?
WHERE id = ?
`

type UpdateUserParams struct {
	Name    sql.NullString
	PhoneNo sql.NullString
	ID      uint64
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser, arg.Name, arg.PhoneNo, arg.ID)
	return err
}
