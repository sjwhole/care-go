// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: subscriptions.sql

package db

import (
	"context"
	"database/sql"
)

const createSubscription = `-- name: CreateSubscription :execresult
INSERT INTO subscriptions (user_id, expires_at)
VALUES (?, ?)
`

type CreateSubscriptionParams struct {
	UserID    sql.NullInt64
	ExpiresAt sql.NullTime
}

func (q *Queries) CreateSubscription(ctx context.Context, arg CreateSubscriptionParams) (sql.Result, error) {
	return q.db.ExecContext(ctx, createSubscription, arg.UserID, arg.ExpiresAt)
}

const getSubscriptionById = `-- name: GetSubscriptionById :one
SELECT id, created_at, updated_at, deleted_at, user_id, expires_at
FROM subscriptions
WHERE id = ?
`

func (q *Queries) GetSubscriptionById(ctx context.Context, id uint64) (Subscription, error) {
	row := q.db.QueryRowContext(ctx, getSubscriptionById, id)
	var i Subscription
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.UserID,
		&i.ExpiresAt,
	)
	return i, err
}

const getSubscriptionsByUserId = `-- name: GetSubscriptionsByUserId :many
SELECT id, created_at, updated_at, deleted_at, user_id, expires_at
FROM subscriptions
WHERE user_id = ?
ORDER BY expires_at DESC
`

func (q *Queries) GetSubscriptionsByUserId(ctx context.Context, userID sql.NullInt64) ([]Subscription, error) {
	rows, err := q.db.QueryContext(ctx, getSubscriptionsByUserId, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Subscription
	for rows.Next() {
		var i Subscription
		if err := rows.Scan(
			&i.ID,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.UserID,
			&i.ExpiresAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
